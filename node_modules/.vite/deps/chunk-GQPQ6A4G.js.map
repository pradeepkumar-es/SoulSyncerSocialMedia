{
  "version": 3,
  "sources": ["../../@firebase/app/src/platformLoggerService.ts", "../../@firebase/app/src/logger.ts", "../../@firebase/app/src/constants.ts", "../../@firebase/app/src/internal.ts", "../../@firebase/app/src/errors.ts", "../../@firebase/app/src/firebaseApp.ts", "../../@firebase/app/src/firebaseServerApp.ts", "../../@firebase/app/src/api.ts", "../../@firebase/app/src/indexeddb.ts", "../../@firebase/app/src/heartbeatService.ts", "../../@firebase/app/src/registerCoreComponents.ts", "../../@firebase/app/src/index.ts"],
  "sourcesContent": ["/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  ComponentContainer,\n  ComponentType,\n  Provider,\n  Name\n} from '@firebase/component';\nimport { PlatformLoggerService, VersionService } from './types';\n\nexport class PlatformLoggerServiceImpl implements PlatformLoggerService {\n  constructor(private readonly container: ComponentContainer) {}\n  // In initial implementation, this will be called by installations on\n  // auth token refresh, and installations will send this string.\n  getPlatformInfoString(): string {\n    const providers = this.container.getProviders();\n    // Loop through providers and get library/version pairs from any that are\n    // version components.\n    return providers\n      .map(provider => {\n        if (isVersionServiceProvider(provider)) {\n          const service = provider.getImmediate() as VersionService;\n          return `${service.library}/${service.version}`;\n        } else {\n          return null;\n        }\n      })\n      .filter(logString => logString)\n      .join(' ');\n  }\n}\n/**\n *\n * @param provider check if this provider provides a VersionService\n *\n * NOTE: Using Provider<'app-version'> is a hack to indicate that the provider\n * provides VersionService. The provider is not necessarily a 'app-version'\n * provider.\n */\nfunction isVersionServiceProvider(provider: Provider<Name>): boolean {\n  const component = provider.getComponent();\n  return component?.type === ComponentType.VERSION;\n}\n", "/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Logger } from '@firebase/logger';\n\nexport const logger = new Logger('@firebase/app');\n", "/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { name as appName } from '../package.json';\nimport { name as appCompatName } from '../../app-compat/package.json';\nimport { name as analyticsCompatName } from '../../../packages/analytics-compat/package.json';\nimport { name as analyticsName } from '../../../packages/analytics/package.json';\nimport { name as appCheckCompatName } from '../../../packages/app-check-compat/package.json';\nimport { name as appCheckName } from '../../../packages/app-check/package.json';\nimport { name as authName } from '../../../packages/auth/package.json';\nimport { name as authCompatName } from '../../../packages/auth-compat/package.json';\nimport { name as databaseName } from '../../../packages/database/package.json';\nimport { name as databaseCompatName } from '../../../packages/database-compat/package.json';\nimport { name as functionsName } from '../../../packages/functions/package.json';\nimport { name as functionsCompatName } from '../../../packages/functions-compat/package.json';\nimport { name as installationsName } from '../../../packages/installations/package.json';\nimport { name as installationsCompatName } from '../../../packages/installations-compat/package.json';\nimport { name as messagingName } from '../../../packages/messaging/package.json';\nimport { name as messagingCompatName } from '../../../packages/messaging-compat/package.json';\nimport { name as performanceName } from '../../../packages/performance/package.json';\nimport { name as performanceCompatName } from '../../../packages/performance-compat/package.json';\nimport { name as remoteConfigName } from '../../../packages/remote-config/package.json';\nimport { name as remoteConfigCompatName } from '../../../packages/remote-config-compat/package.json';\nimport { name as storageName } from '../../../packages/storage/package.json';\nimport { name as storageCompatName } from '../../../packages/storage-compat/package.json';\nimport { name as firestoreName } from '../../../packages/firestore/package.json';\nimport { name as vertexName } from '../../../packages/vertexai/package.json';\nimport { name as firestoreCompatName } from '../../../packages/firestore-compat/package.json';\nimport { name as packageName } from '../../../packages/firebase/package.json';\n\n/**\n * The default app name\n *\n * @internal\n */\nexport const DEFAULT_ENTRY_NAME = '[DEFAULT]';\n\nexport const PLATFORM_LOG_STRING = {\n  [appName]: 'fire-core',\n  [appCompatName]: 'fire-core-compat',\n  [analyticsName]: 'fire-analytics',\n  [analyticsCompatName]: 'fire-analytics-compat',\n  [appCheckName]: 'fire-app-check',\n  [appCheckCompatName]: 'fire-app-check-compat',\n  [authName]: 'fire-auth',\n  [authCompatName]: 'fire-auth-compat',\n  [databaseName]: 'fire-rtdb',\n  [databaseCompatName]: 'fire-rtdb-compat',\n  [functionsName]: 'fire-fn',\n  [functionsCompatName]: 'fire-fn-compat',\n  [installationsName]: 'fire-iid',\n  [installationsCompatName]: 'fire-iid-compat',\n  [messagingName]: 'fire-fcm',\n  [messagingCompatName]: 'fire-fcm-compat',\n  [performanceName]: 'fire-perf',\n  [performanceCompatName]: 'fire-perf-compat',\n  [remoteConfigName]: 'fire-rc',\n  [remoteConfigCompatName]: 'fire-rc-compat',\n  [storageName]: 'fire-gcs',\n  [storageCompatName]: 'fire-gcs-compat',\n  [firestoreName]: 'fire-fst',\n  [firestoreCompatName]: 'fire-fst-compat',\n  [vertexName]: 'fire-vertex',\n  'fire-js': 'fire-js', // Platform identifier for JS SDK.\n  [packageName]: 'fire-js-all'\n} as const;\n", "/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  FirebaseApp,\n  FirebaseOptions,\n  FirebaseServerApp\n} from './public-types';\nimport { Component, Provider, Name } from '@firebase/component';\nimport { logger } from './logger';\nimport { DEFAULT_ENTRY_NAME } from './constants';\nimport { FirebaseAppImpl } from './firebaseApp';\nimport { FirebaseServerAppImpl } from './firebaseServerApp';\n\n/**\n * @internal\n */\nexport const _apps = new Map<string, FirebaseApp>();\n\n/**\n * @internal\n */\nexport const _serverApps = new Map<string, FirebaseServerApp>();\n\n/**\n * Registered components.\n *\n * @internal\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport const _components = new Map<string, Component<any>>();\n\n/**\n * @param component - the component being added to this app's container\n *\n * @internal\n */\nexport function _addComponent<T extends Name>(\n  app: FirebaseApp,\n  component: Component<T>\n): void {\n  try {\n    (app as FirebaseAppImpl).container.addComponent(component);\n  } catch (e) {\n    logger.debug(\n      `Component ${component.name} failed to register with FirebaseApp ${app.name}`,\n      e\n    );\n  }\n}\n\n/**\n *\n * @internal\n */\nexport function _addOrOverwriteComponent(\n  app: FirebaseApp,\n  component: Component\n): void {\n  (app as FirebaseAppImpl).container.addOrOverwriteComponent(component);\n}\n\n/**\n *\n * @param component - the component to register\n * @returns whether or not the component is registered successfully\n *\n * @internal\n */\nexport function _registerComponent<T extends Name>(\n  component: Component<T>\n): boolean {\n  const componentName = component.name;\n  if (_components.has(componentName)) {\n    logger.debug(\n      `There were multiple attempts to register component ${componentName}.`\n    );\n\n    return false;\n  }\n\n  _components.set(componentName, component);\n\n  // add the component to existing app instances\n  for (const app of _apps.values()) {\n    _addComponent(app as FirebaseAppImpl, component);\n  }\n\n  for (const serverApp of _serverApps.values()) {\n    _addComponent(serverApp as FirebaseServerAppImpl, component);\n  }\n\n  return true;\n}\n\n/**\n *\n * @param app - FirebaseApp instance\n * @param name - service name\n *\n * @returns the provider for the service with the matching name\n *\n * @internal\n */\nexport function _getProvider<T extends Name>(\n  app: FirebaseApp,\n  name: T\n): Provider<T> {\n  const heartbeatController = (app as FirebaseAppImpl).container\n    .getProvider('heartbeat')\n    .getImmediate({ optional: true });\n  if (heartbeatController) {\n    void heartbeatController.triggerHeartbeat();\n  }\n  return (app as FirebaseAppImpl).container.getProvider(name);\n}\n\n/**\n *\n * @param app - FirebaseApp instance\n * @param name - service name\n * @param instanceIdentifier - service instance identifier in case the service supports multiple instances\n *\n * @internal\n */\nexport function _removeServiceInstance<T extends Name>(\n  app: FirebaseApp,\n  name: T,\n  instanceIdentifier: string = DEFAULT_ENTRY_NAME\n): void {\n  _getProvider(app, name).clearInstance(instanceIdentifier);\n}\n\n/**\n *\n * @param obj - an object of type FirebaseApp or FirebaseOptions.\n *\n * @returns true if the provide object is of type FirebaseApp.\n *\n * @internal\n */\nexport function _isFirebaseApp(\n  obj: FirebaseApp | FirebaseOptions\n): obj is FirebaseApp {\n  return (obj as FirebaseApp).options !== undefined;\n}\n\n/**\n *\n * @param obj - an object of type FirebaseApp.\n *\n * @returns true if the provided object is of type FirebaseServerAppImpl.\n *\n * @internal\n */\nexport function _isFirebaseServerApp(\n  obj: FirebaseApp | FirebaseServerApp\n): obj is FirebaseServerApp {\n  return (obj as FirebaseServerApp).settings !== undefined;\n}\n\n/**\n * Test only\n *\n * @internal\n */\nexport function _clearComponents(): void {\n  _components.clear();\n}\n\n/**\n * Exported in order to be used in app-compat package\n */\nexport { DEFAULT_ENTRY_NAME as _DEFAULT_ENTRY_NAME };\n", "/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ErrorFactory, ErrorMap } from '@firebase/util';\n\nexport const enum AppError {\n  NO_APP = 'no-app',\n  BAD_APP_NAME = 'bad-app-name',\n  DUPLICATE_APP = 'duplicate-app',\n  APP_DELETED = 'app-deleted',\n  SERVER_APP_DELETED = 'server-app-deleted',\n  NO_OPTIONS = 'no-options',\n  INVALID_APP_ARGUMENT = 'invalid-app-argument',\n  INVALID_LOG_ARGUMENT = 'invalid-log-argument',\n  IDB_OPEN = 'idb-open',\n  IDB_GET = 'idb-get',\n  IDB_WRITE = 'idb-set',\n  IDB_DELETE = 'idb-delete',\n  FINALIZATION_REGISTRY_NOT_SUPPORTED = 'finalization-registry-not-supported',\n  INVALID_SERVER_APP_ENVIRONMENT = 'invalid-server-app-environment'\n}\n\nconst ERRORS: ErrorMap<AppError> = {\n  [AppError.NO_APP]:\n    \"No Firebase App '{$appName}' has been created - \" +\n    'call initializeApp() first',\n  [AppError.BAD_APP_NAME]: \"Illegal App name: '{$appName}'\",\n  [AppError.DUPLICATE_APP]:\n    \"Firebase App named '{$appName}' already exists with different options or config\",\n  [AppError.APP_DELETED]: \"Firebase App named '{$appName}' already deleted\",\n  [AppError.SERVER_APP_DELETED]: 'Firebase Server App has been deleted',\n  [AppError.NO_OPTIONS]:\n    'Need to provide options, when not being deployed to hosting via source.',\n  [AppError.INVALID_APP_ARGUMENT]:\n    'firebase.{$appName}() takes either no argument or a ' +\n    'Firebase App instance.',\n  [AppError.INVALID_LOG_ARGUMENT]:\n    'First argument to `onLog` must be null or a function.',\n  [AppError.IDB_OPEN]:\n    'Error thrown when opening IndexedDB. Original error: {$originalErrorMessage}.',\n  [AppError.IDB_GET]:\n    'Error thrown when reading from IndexedDB. Original error: {$originalErrorMessage}.',\n  [AppError.IDB_WRITE]:\n    'Error thrown when writing to IndexedDB. Original error: {$originalErrorMessage}.',\n  [AppError.IDB_DELETE]:\n    'Error thrown when deleting from IndexedDB. Original error: {$originalErrorMessage}.',\n  [AppError.FINALIZATION_REGISTRY_NOT_SUPPORTED]:\n    'FirebaseServerApp deleteOnDeref field defined but the JS runtime does not support FinalizationRegistry.',\n  [AppError.INVALID_SERVER_APP_ENVIRONMENT]:\n    'FirebaseServerApp is not for use in browser environments.'\n};\n\ninterface ErrorParams {\n  [AppError.NO_APP]: { appName: string };\n  [AppError.BAD_APP_NAME]: { appName: string };\n  [AppError.DUPLICATE_APP]: { appName: string };\n  [AppError.APP_DELETED]: { appName: string };\n  [AppError.INVALID_APP_ARGUMENT]: { appName: string };\n  [AppError.IDB_OPEN]: { originalErrorMessage?: string };\n  [AppError.IDB_GET]: { originalErrorMessage?: string };\n  [AppError.IDB_WRITE]: { originalErrorMessage?: string };\n  [AppError.IDB_DELETE]: { originalErrorMessage?: string };\n  [AppError.FINALIZATION_REGISTRY_NOT_SUPPORTED]: { appName?: string };\n}\n\nexport const ERROR_FACTORY = new ErrorFactory<AppError, ErrorParams>(\n  'app',\n  'Firebase',\n  ERRORS\n);\n", "/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  FirebaseApp,\n  FirebaseOptions,\n  FirebaseAppSettings\n} from './public-types';\nimport {\n  ComponentContainer,\n  Component,\n  ComponentType\n} from '@firebase/component';\nimport { ERROR_FACTORY, AppError } from './errors';\n\nexport class FirebaseAppImpl implements FirebaseApp {\n  protected readonly _options: FirebaseOptions;\n  protected readonly _name: string;\n  /**\n   * Original config values passed in as a constructor parameter.\n   * It is only used to compare with another config object to support idempotent initializeApp().\n   *\n   * Updating automaticDataCollectionEnabled on the App instance will not change its value in _config.\n   */\n  private readonly _config: Required<FirebaseAppSettings>;\n  private _automaticDataCollectionEnabled: boolean;\n  protected _isDeleted = false;\n  private readonly _container: ComponentContainer;\n\n  constructor(\n    options: FirebaseOptions,\n    config: Required<FirebaseAppSettings>,\n    container: ComponentContainer\n  ) {\n    this._options = { ...options };\n    this._config = { ...config };\n    this._name = config.name;\n    this._automaticDataCollectionEnabled =\n      config.automaticDataCollectionEnabled;\n    this._container = container;\n    this.container.addComponent(\n      new Component('app', () => this, ComponentType.PUBLIC)\n    );\n  }\n\n  get automaticDataCollectionEnabled(): boolean {\n    this.checkDestroyed();\n    return this._automaticDataCollectionEnabled;\n  }\n\n  set automaticDataCollectionEnabled(val: boolean) {\n    this.checkDestroyed();\n    this._automaticDataCollectionEnabled = val;\n  }\n\n  get name(): string {\n    this.checkDestroyed();\n    return this._name;\n  }\n\n  get options(): FirebaseOptions {\n    this.checkDestroyed();\n    return this._options;\n  }\n\n  get config(): Required<FirebaseAppSettings> {\n    this.checkDestroyed();\n    return this._config;\n  }\n\n  get container(): ComponentContainer {\n    return this._container;\n  }\n\n  get isDeleted(): boolean {\n    return this._isDeleted;\n  }\n\n  set isDeleted(val: boolean) {\n    this._isDeleted = val;\n  }\n\n  /**\n   * This function will throw an Error if the App has already been deleted -\n   * use before performing API actions on the App.\n   */\n  protected checkDestroyed(): void {\n    if (this.isDeleted) {\n      throw ERROR_FACTORY.create(AppError.APP_DELETED, { appName: this._name });\n    }\n  }\n}\n", "/**\n * @license\n * Copyright 2023 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  FirebaseAppSettings,\n  FirebaseServerApp,\n  FirebaseServerAppSettings,\n  FirebaseOptions\n} from './public-types';\nimport { deleteApp, registerVersion } from './api';\nimport { ComponentContainer } from '@firebase/component';\nimport { FirebaseAppImpl } from './firebaseApp';\nimport { ERROR_FACTORY, AppError } from './errors';\nimport { name as packageName, version } from '../package.json';\n\nexport class FirebaseServerAppImpl\n  extends FirebaseAppImpl\n  implements FirebaseServerApp\n{\n  private readonly _serverConfig: FirebaseServerAppSettings;\n  private _finalizationRegistry: FinalizationRegistry<object>;\n  private _refCount: number;\n\n  constructor(\n    options: FirebaseOptions | FirebaseAppImpl,\n    serverConfig: FirebaseServerAppSettings,\n    name: string,\n    container: ComponentContainer\n  ) {\n    // Build configuration parameters for the FirebaseAppImpl base class.\n    const automaticDataCollectionEnabled =\n      serverConfig.automaticDataCollectionEnabled !== undefined\n        ? serverConfig.automaticDataCollectionEnabled\n        : false;\n\n    // Create the FirebaseAppSettings object for the FirebaseAppImp constructor.\n    const config: Required<FirebaseAppSettings> = {\n      name,\n      automaticDataCollectionEnabled\n    };\n\n    if ((options as FirebaseOptions).apiKey !== undefined) {\n      // Construct the parent FirebaseAppImp object.\n      super(options as FirebaseOptions, config, container);\n    } else {\n      const appImpl: FirebaseAppImpl = options as FirebaseAppImpl;\n      super(appImpl.options, config, container);\n    }\n\n    // Now construct the data for the FirebaseServerAppImpl.\n    this._serverConfig = {\n      automaticDataCollectionEnabled,\n      ...serverConfig\n    };\n\n    this._finalizationRegistry = new FinalizationRegistry(() => {\n      this.automaticCleanup();\n    });\n\n    this._refCount = 0;\n    this.incRefCount(this._serverConfig.releaseOnDeref);\n\n    // Do not retain a hard reference to the dref object, otherwise the FinalizationRegisry\n    // will never trigger.\n    this._serverConfig.releaseOnDeref = undefined;\n    serverConfig.releaseOnDeref = undefined;\n\n    registerVersion(packageName, version, 'serverapp');\n  }\n\n  toJSON(): undefined {\n    return undefined;\n  }\n\n  get refCount(): number {\n    return this._refCount;\n  }\n\n  // Increment the reference count of this server app. If an object is provided, register it\n  // with the finalization registry.\n  incRefCount(obj: object | undefined): void {\n    if (this.isDeleted) {\n      return;\n    }\n    this._refCount++;\n    if (obj !== undefined) {\n      this._finalizationRegistry.register(obj, this);\n    }\n  }\n\n  // Decrement the reference count.\n  decRefCount(): number {\n    if (this.isDeleted) {\n      return 0;\n    }\n    return --this._refCount;\n  }\n\n  // Invoked by the FinalizationRegistry callback to note that this app should go through its\n  // reference counts and delete itself if no reference count remain. The coordinating logic that\n  // handles this is in deleteApp(...).\n  private automaticCleanup(): void {\n    void deleteApp(this);\n  }\n\n  get settings(): FirebaseServerAppSettings {\n    this.checkDestroyed();\n    return this._serverConfig;\n  }\n\n  /**\n   * This function will throw an Error if the App has already been deleted -\n   * use before performing API actions on the App.\n   */\n  protected checkDestroyed(): void {\n    if (this.isDeleted) {\n      throw ERROR_FACTORY.create(AppError.SERVER_APP_DELETED);\n    }\n  }\n}\n", "/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  FirebaseApp,\n  FirebaseServerApp,\n  FirebaseOptions,\n  FirebaseAppSettings,\n  FirebaseServerAppSettings\n} from './public-types';\nimport { DEFAULT_ENTRY_NAME, PLATFORM_LOG_STRING } from './constants';\nimport { ERROR_FACTORY, AppError } from './errors';\nimport {\n  ComponentContainer,\n  Component,\n  Name,\n  ComponentType\n} from '@firebase/component';\nimport { version } from '../../firebase/package.json';\nimport { FirebaseAppImpl } from './firebaseApp';\nimport { FirebaseServerAppImpl } from './firebaseServerApp';\nimport {\n  _apps,\n  _components,\n  _isFirebaseApp,\n  _registerComponent,\n  _serverApps\n} from './internal';\nimport { logger } from './logger';\nimport {\n  LogLevelString,\n  setLogLevel as setLogLevelImpl,\n  LogCallback,\n  LogOptions,\n  setUserLogHandler\n} from '@firebase/logger';\nimport { deepEqual, getDefaultAppConfig, isBrowser } from '@firebase/util';\n\nexport { FirebaseError } from '@firebase/util';\n\n/**\n * The current SDK version.\n *\n * @public\n */\nexport const SDK_VERSION = version;\n\n/**\n * Creates and initializes a {@link @firebase/app#FirebaseApp} instance.\n *\n * See\n * {@link\n *   https://firebase.google.com/docs/web/setup#add_firebase_to_your_app\n *   | Add Firebase to your app} and\n * {@link\n *   https://firebase.google.com/docs/web/setup#multiple-projects\n *   | Initialize multiple projects} for detailed documentation.\n *\n * @example\n * ```javascript\n *\n * // Initialize default app\n * // Retrieve your own options values by adding a web app on\n * // https://console.firebase.google.com\n * initializeApp({\n *   apiKey: \"AIza....\",                             // Auth / General Use\n *   authDomain: \"YOUR_APP.firebaseapp.com\",         // Auth with popup/redirect\n *   databaseURL: \"https://YOUR_APP.firebaseio.com\", // Realtime Database\n *   storageBucket: \"YOUR_APP.appspot.com\",          // Storage\n *   messagingSenderId: \"123456789\"                  // Cloud Messaging\n * });\n * ```\n *\n * @example\n * ```javascript\n *\n * // Initialize another app\n * const otherApp = initializeApp({\n *   databaseURL: \"https://<OTHER_DATABASE_NAME>.firebaseio.com\",\n *   storageBucket: \"<OTHER_STORAGE_BUCKET>.appspot.com\"\n * }, \"otherApp\");\n * ```\n *\n * @param options - Options to configure the app's services.\n * @param name - Optional name of the app to initialize. If no name\n *   is provided, the default is `\"[DEFAULT]\"`.\n *\n * @returns The initialized app.\n *\n * @public\n */\nexport function initializeApp(\n  options: FirebaseOptions,\n  name?: string\n): FirebaseApp;\n/**\n * Creates and initializes a FirebaseApp instance.\n *\n * @param options - Options to configure the app's services.\n * @param config - FirebaseApp Configuration\n *\n * @public\n */\nexport function initializeApp(\n  options: FirebaseOptions,\n  config?: FirebaseAppSettings\n): FirebaseApp;\n/**\n * Creates and initializes a FirebaseApp instance.\n *\n * @public\n */\nexport function initializeApp(): FirebaseApp;\nexport function initializeApp(\n  _options?: FirebaseOptions,\n  rawConfig = {}\n): FirebaseApp {\n  let options = _options;\n\n  if (typeof rawConfig !== 'object') {\n    const name = rawConfig;\n    rawConfig = { name };\n  }\n\n  const config: Required<FirebaseAppSettings> = {\n    name: DEFAULT_ENTRY_NAME,\n    automaticDataCollectionEnabled: false,\n    ...rawConfig\n  };\n  const name = config.name;\n\n  if (typeof name !== 'string' || !name) {\n    throw ERROR_FACTORY.create(AppError.BAD_APP_NAME, {\n      appName: String(name)\n    });\n  }\n\n  options ||= getDefaultAppConfig();\n\n  if (!options) {\n    throw ERROR_FACTORY.create(AppError.NO_OPTIONS);\n  }\n\n  const existingApp = _apps.get(name) as FirebaseAppImpl;\n  if (existingApp) {\n    // return the existing app if options and config deep equal the ones in the existing app.\n    if (\n      deepEqual(options, existingApp.options) &&\n      deepEqual(config, existingApp.config)\n    ) {\n      return existingApp;\n    } else {\n      throw ERROR_FACTORY.create(AppError.DUPLICATE_APP, { appName: name });\n    }\n  }\n\n  const container = new ComponentContainer(name);\n  for (const component of _components.values()) {\n    container.addComponent(component);\n  }\n\n  const newApp = new FirebaseAppImpl(options, config, container);\n\n  _apps.set(name, newApp);\n\n  return newApp;\n}\n\n/**\n * Creates and initializes a {@link @firebase/app#FirebaseServerApp} instance.\n *\n * The `FirebaseServerApp` is similar to `FirebaseApp`, but is intended for execution in\n * server side rendering environments only. Initialization will fail if invoked from a\n * browser environment.\n *\n * See\n * {@link\n *   https://firebase.google.com/docs/web/setup#add_firebase_to_your_app\n *   | Add Firebase to your app} and\n * {@link\n *   https://firebase.google.com/docs/web/setup#multiple-projects\n *   | Initialize multiple projects} for detailed documentation.\n *\n * @example\n * ```javascript\n *\n * // Initialize an instance of `FirebaseServerApp`.\n * // Retrieve your own options values by adding a web app on\n * // https://console.firebase.google.com\n * initializeServerApp({\n *     apiKey: \"AIza....\",                             // Auth / General Use\n *     authDomain: \"YOUR_APP.firebaseapp.com\",         // Auth with popup/redirect\n *     databaseURL: \"https://YOUR_APP.firebaseio.com\", // Realtime Database\n *     storageBucket: \"YOUR_APP.appspot.com\",          // Storage\n *     messagingSenderId: \"123456789\"                  // Cloud Messaging\n *   },\n *   {\n *    authIdToken: \"Your Auth ID Token\"\n *   });\n * ```\n *\n * @param options - `Firebase.AppOptions` to configure the app's services, or a\n *   a `FirebaseApp` instance which contains the `AppOptions` within.\n * @param config - `FirebaseServerApp` configuration.\n *\n * @returns The initialized `FirebaseServerApp`.\n *\n * @public\n */\nexport function initializeServerApp(\n  options: FirebaseOptions | FirebaseApp,\n  config: FirebaseServerAppSettings\n): FirebaseServerApp;\n\nexport function initializeServerApp(\n  _options: FirebaseOptions | FirebaseApp,\n  _serverAppConfig: FirebaseServerAppSettings\n): FirebaseServerApp {\n  if (isBrowser()) {\n    // FirebaseServerApp isn't designed to be run in browsers.\n    throw ERROR_FACTORY.create(AppError.INVALID_SERVER_APP_ENVIRONMENT);\n  }\n\n  if (_serverAppConfig.automaticDataCollectionEnabled === undefined) {\n    _serverAppConfig.automaticDataCollectionEnabled = false;\n  }\n\n  let appOptions: FirebaseOptions;\n  if (_isFirebaseApp(_options)) {\n    appOptions = _options.options;\n  } else {\n    appOptions = _options;\n  }\n\n  // Build an app name based on a hash of the configuration options.\n  const nameObj = {\n    ..._serverAppConfig,\n    ...appOptions\n  };\n\n  // However, Do not mangle the name based on releaseOnDeref, since it will vary between the\n  // construction of FirebaseServerApp instances. For example, if the object is the request headers.\n  if (nameObj.releaseOnDeref !== undefined) {\n    delete nameObj.releaseOnDeref;\n  }\n\n  const hashCode = (s: string): number => {\n    return [...s].reduce(\n      (hash, c) => (Math.imul(31, hash) + c.charCodeAt(0)) | 0,\n      0\n    );\n  };\n\n  if (_serverAppConfig.releaseOnDeref !== undefined) {\n    if (typeof FinalizationRegistry === 'undefined') {\n      throw ERROR_FACTORY.create(\n        AppError.FINALIZATION_REGISTRY_NOT_SUPPORTED,\n        {}\n      );\n    }\n  }\n\n  const nameString = '' + hashCode(JSON.stringify(nameObj));\n  const existingApp = _serverApps.get(nameString) as FirebaseServerApp;\n  if (existingApp) {\n    (existingApp as FirebaseServerAppImpl).incRefCount(\n      _serverAppConfig.releaseOnDeref\n    );\n    return existingApp;\n  }\n\n  const container = new ComponentContainer(nameString);\n  for (const component of _components.values()) {\n    container.addComponent(component);\n  }\n\n  const newApp = new FirebaseServerAppImpl(\n    appOptions,\n    _serverAppConfig,\n    nameString,\n    container\n  );\n\n  _serverApps.set(nameString, newApp);\n\n  return newApp;\n}\n\n/**\n * Retrieves a {@link @firebase/app#FirebaseApp} instance.\n *\n * When called with no arguments, the default app is returned. When an app name\n * is provided, the app corresponding to that name is returned.\n *\n * An exception is thrown if the app being retrieved has not yet been\n * initialized.\n *\n * @example\n * ```javascript\n * // Return the default app\n * const app = getApp();\n * ```\n *\n * @example\n * ```javascript\n * // Return a named app\n * const otherApp = getApp(\"otherApp\");\n * ```\n *\n * @param name - Optional name of the app to return. If no name is\n *   provided, the default is `\"[DEFAULT]\"`.\n *\n * @returns The app corresponding to the provided app name.\n *   If no app name is provided, the default app is returned.\n *\n * @public\n */\nexport function getApp(name: string = DEFAULT_ENTRY_NAME): FirebaseApp {\n  const app = _apps.get(name);\n  if (!app && name === DEFAULT_ENTRY_NAME && getDefaultAppConfig()) {\n    return initializeApp();\n  }\n  if (!app) {\n    throw ERROR_FACTORY.create(AppError.NO_APP, { appName: name });\n  }\n\n  return app;\n}\n\n/**\n * A (read-only) array of all initialized apps.\n * @public\n */\nexport function getApps(): FirebaseApp[] {\n  return Array.from(_apps.values());\n}\n\n/**\n * Renders this app unusable and frees the resources of all associated\n * services.\n *\n * @example\n * ```javascript\n * deleteApp(app)\n *   .then(function() {\n *     console.log(\"App deleted successfully\");\n *   })\n *   .catch(function(error) {\n *     console.log(\"Error deleting app:\", error);\n *   });\n * ```\n *\n * @public\n */\nexport async function deleteApp(app: FirebaseApp): Promise<void> {\n  let cleanupProviders = false;\n  const name = app.name;\n  if (_apps.has(name)) {\n    cleanupProviders = true;\n    _apps.delete(name);\n  } else if (_serverApps.has(name)) {\n    const firebaseServerApp = app as FirebaseServerAppImpl;\n    if (firebaseServerApp.decRefCount() <= 0) {\n      _serverApps.delete(name);\n      cleanupProviders = true;\n    }\n  }\n\n  if (cleanupProviders) {\n    await Promise.all(\n      (app as FirebaseAppImpl).container\n        .getProviders()\n        .map(provider => provider.delete())\n    );\n    (app as FirebaseAppImpl).isDeleted = true;\n  }\n}\n\n/**\n * Registers a library's name and version for platform logging purposes.\n * @param library - Name of 1p or 3p library (e.g. firestore, angularfire)\n * @param version - Current version of that library.\n * @param variant - Bundle variant, e.g., node, rn, etc.\n *\n * @public\n */\nexport function registerVersion(\n  libraryKeyOrName: string,\n  version: string,\n  variant?: string\n): void {\n  // TODO: We can use this check to whitelist strings when/if we set up\n  // a good whitelist system.\n  let library = PLATFORM_LOG_STRING[libraryKeyOrName] ?? libraryKeyOrName;\n  if (variant) {\n    library += `-${variant}`;\n  }\n  const libraryMismatch = library.match(/\\s|\\//);\n  const versionMismatch = version.match(/\\s|\\//);\n  if (libraryMismatch || versionMismatch) {\n    const warning = [\n      `Unable to register library \"${library}\" with version \"${version}\":`\n    ];\n    if (libraryMismatch) {\n      warning.push(\n        `library name \"${library}\" contains illegal characters (whitespace or \"/\")`\n      );\n    }\n    if (libraryMismatch && versionMismatch) {\n      warning.push('and');\n    }\n    if (versionMismatch) {\n      warning.push(\n        `version name \"${version}\" contains illegal characters (whitespace or \"/\")`\n      );\n    }\n    logger.warn(warning.join(' '));\n    return;\n  }\n  _registerComponent(\n    new Component(\n      `${library}-version` as Name,\n      () => ({ library, version }),\n      ComponentType.VERSION\n    )\n  );\n}\n\n/**\n * Sets log handler for all Firebase SDKs.\n * @param logCallback - An optional custom log handler that executes user code whenever\n * the Firebase SDK makes a logging call.\n *\n * @public\n */\nexport function onLog(\n  logCallback: LogCallback | null,\n  options?: LogOptions\n): void {\n  if (logCallback !== null && typeof logCallback !== 'function') {\n    throw ERROR_FACTORY.create(AppError.INVALID_LOG_ARGUMENT);\n  }\n  setUserLogHandler(logCallback, options);\n}\n\n/**\n * Sets log level for all Firebase SDKs.\n *\n * All of the log types above the current log level are captured (i.e. if\n * you set the log level to `info`, errors are logged, but `debug` and\n * `verbose` logs are not).\n *\n * @public\n */\nexport function setLogLevel(logLevel: LogLevelString): void {\n  setLogLevelImpl(logLevel);\n}\n", "/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FirebaseError } from '@firebase/util';\nimport { DBSchema, openDB, IDBPDatabase } from 'idb';\nimport { AppError, ERROR_FACTORY } from './errors';\nimport { FirebaseApp } from './public-types';\nimport { HeartbeatsInIndexedDB } from './types';\nimport { logger } from './logger';\n\nconst DB_NAME = 'firebase-heartbeat-database';\nconst DB_VERSION = 1;\nconst STORE_NAME = 'firebase-heartbeat-store';\n\ninterface AppDB extends DBSchema {\n  'firebase-heartbeat-store': {\n    key: string;\n    value: HeartbeatsInIndexedDB;\n  };\n}\n\nlet dbPromise: Promise<IDBPDatabase<AppDB>> | null = null;\nfunction getDbPromise(): Promise<IDBPDatabase<AppDB>> {\n  if (!dbPromise) {\n    dbPromise = openDB<AppDB>(DB_NAME, DB_VERSION, {\n      upgrade: (db, oldVersion) => {\n        // We don't use 'break' in this switch statement, the fall-through\n        // behavior is what we want, because if there are multiple versions between\n        // the old version and the current version, we want ALL the migrations\n        // that correspond to those versions to run, not only the last one.\n        // eslint-disable-next-line default-case\n        switch (oldVersion) {\n          case 0:\n            try {\n              db.createObjectStore(STORE_NAME);\n            } catch (e) {\n              // Safari/iOS browsers throw occasional exceptions on\n              // db.createObjectStore() that may be a bug. Avoid blocking\n              // the rest of the app functionality.\n              console.warn(e);\n            }\n        }\n      }\n    }).catch(e => {\n      throw ERROR_FACTORY.create(AppError.IDB_OPEN, {\n        originalErrorMessage: e.message\n      });\n    });\n  }\n  return dbPromise;\n}\n\nexport async function readHeartbeatsFromIndexedDB(\n  app: FirebaseApp\n): Promise<HeartbeatsInIndexedDB | undefined> {\n  try {\n    const db = await getDbPromise();\n    const tx = db.transaction(STORE_NAME);\n    const result = await tx.objectStore(STORE_NAME).get(computeKey(app));\n    // We already have the value but tx.done can throw,\n    // so we need to await it here to catch errors\n    await tx.done;\n    return result;\n  } catch (e) {\n    if (e instanceof FirebaseError) {\n      logger.warn(e.message);\n    } else {\n      const idbGetError = ERROR_FACTORY.create(AppError.IDB_GET, {\n        originalErrorMessage: (e as Error)?.message\n      });\n      logger.warn(idbGetError.message);\n    }\n  }\n}\n\nexport async function writeHeartbeatsToIndexedDB(\n  app: FirebaseApp,\n  heartbeatObject: HeartbeatsInIndexedDB\n): Promise<void> {\n  try {\n    const db = await getDbPromise();\n    const tx = db.transaction(STORE_NAME, 'readwrite');\n    const objectStore = tx.objectStore(STORE_NAME);\n    await objectStore.put(heartbeatObject, computeKey(app));\n    await tx.done;\n  } catch (e) {\n    if (e instanceof FirebaseError) {\n      logger.warn(e.message);\n    } else {\n      const idbGetError = ERROR_FACTORY.create(AppError.IDB_WRITE, {\n        originalErrorMessage: (e as Error)?.message\n      });\n      logger.warn(idbGetError.message);\n    }\n  }\n}\n\nfunction computeKey(app: FirebaseApp): string {\n  return `${app.name}!${app.options.appId}`;\n}\n", "/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ComponentContainer } from '@firebase/component';\nimport {\n  base64urlEncodeWithoutPadding,\n  isIndexedDBAvailable,\n  validateIndexedDBOpenable\n} from '@firebase/util';\nimport {\n  readHeartbeatsFromIndexedDB,\n  writeHeartbeatsToIndexedDB\n} from './indexeddb';\nimport { FirebaseApp } from './public-types';\nimport {\n  HeartbeatsByUserAgent,\n  HeartbeatService,\n  HeartbeatsInIndexedDB,\n  HeartbeatStorage,\n  SingleDateHeartbeat\n} from './types';\n\nconst MAX_HEADER_BYTES = 1024;\n// 30 days\nconst STORED_HEARTBEAT_RETENTION_MAX_MILLIS = 30 * 24 * 60 * 60 * 1000;\n\nexport class HeartbeatServiceImpl implements HeartbeatService {\n  /**\n   * The persistence layer for heartbeats\n   * Leave public for easier testing.\n   */\n  _storage: HeartbeatStorageImpl;\n\n  /**\n   * In-memory cache for heartbeats, used by getHeartbeatsHeader() to generate\n   * the header string.\n   * Stores one record per date. This will be consolidated into the standard\n   * format of one record per user agent string before being sent as a header.\n   * Populated from indexedDB when the controller is instantiated and should\n   * be kept in sync with indexedDB.\n   * Leave public for easier testing.\n   */\n  _heartbeatsCache: HeartbeatsInIndexedDB | null = null;\n\n  /**\n   * the initialization promise for populating heartbeatCache.\n   * If getHeartbeatsHeader() is called before the promise resolves\n   * (hearbeatsCache == null), it should wait for this promise\n   * Leave public for easier testing.\n   */\n  _heartbeatsCachePromise: Promise<HeartbeatsInIndexedDB>;\n  constructor(private readonly container: ComponentContainer) {\n    const app = this.container.getProvider('app').getImmediate();\n    this._storage = new HeartbeatStorageImpl(app);\n    this._heartbeatsCachePromise = this._storage.read().then(result => {\n      this._heartbeatsCache = result;\n      return result;\n    });\n  }\n\n  /**\n   * Called to report a heartbeat. The function will generate\n   * a HeartbeatsByUserAgent object, update heartbeatsCache, and persist it\n   * to IndexedDB.\n   * Note that we only store one heartbeat per day. So if a heartbeat for today is\n   * already logged, subsequent calls to this function in the same day will be ignored.\n   */\n  async triggerHeartbeat(): Promise<void> {\n    const platformLogger = this.container\n      .getProvider('platform-logger')\n      .getImmediate();\n\n    // This is the \"Firebase user agent\" string from the platform logger\n    // service, not the browser user agent.\n    const agent = platformLogger.getPlatformInfoString();\n    const date = getUTCDateString();\n    if (this._heartbeatsCache?.heartbeats == null) {\n      this._heartbeatsCache = await this._heartbeatsCachePromise;\n      // If we failed to construct a heartbeats cache, then return immediately.\n      if (this._heartbeatsCache?.heartbeats == null) {\n        return;\n      }\n    }\n    // Do not store a heartbeat if one is already stored for this day\n    // or if a header has already been sent today.\n    if (\n      this._heartbeatsCache.lastSentHeartbeatDate === date ||\n      this._heartbeatsCache.heartbeats.some(\n        singleDateHeartbeat => singleDateHeartbeat.date === date\n      )\n    ) {\n      return;\n    } else {\n      // There is no entry for this date. Create one.\n      this._heartbeatsCache.heartbeats.push({ date, agent });\n    }\n    // Remove entries older than 30 days.\n    this._heartbeatsCache.heartbeats = this._heartbeatsCache.heartbeats.filter(\n      singleDateHeartbeat => {\n        const hbTimestamp = new Date(singleDateHeartbeat.date).valueOf();\n        const now = Date.now();\n        return now - hbTimestamp <= STORED_HEARTBEAT_RETENTION_MAX_MILLIS;\n      }\n    );\n    return this._storage.overwrite(this._heartbeatsCache);\n  }\n\n  /**\n   * Returns a base64 encoded string which can be attached to the heartbeat-specific header directly.\n   * It also clears all heartbeats from memory as well as in IndexedDB.\n   *\n   * NOTE: Consuming product SDKs should not send the header if this method\n   * returns an empty string.\n   */\n  async getHeartbeatsHeader(): Promise<string> {\n    if (this._heartbeatsCache === null) {\n      await this._heartbeatsCachePromise;\n    }\n    // If it's still null or the array is empty, there is no data to send.\n    if (\n      this._heartbeatsCache?.heartbeats == null ||\n      this._heartbeatsCache.heartbeats.length === 0\n    ) {\n      return '';\n    }\n    const date = getUTCDateString();\n    // Extract as many heartbeats from the cache as will fit under the size limit.\n    const { heartbeatsToSend, unsentEntries } = extractHeartbeatsForHeader(\n      this._heartbeatsCache.heartbeats\n    );\n    const headerString = base64urlEncodeWithoutPadding(\n      JSON.stringify({ version: 2, heartbeats: heartbeatsToSend })\n    );\n    // Store last sent date to prevent another being logged/sent for the same day.\n    this._heartbeatsCache.lastSentHeartbeatDate = date;\n    if (unsentEntries.length > 0) {\n      // Store any unsent entries if they exist.\n      this._heartbeatsCache.heartbeats = unsentEntries;\n      // This seems more likely than emptying the array (below) to lead to some odd state\n      // since the cache isn't empty and this will be called again on the next request,\n      // and is probably safest if we await it.\n      await this._storage.overwrite(this._heartbeatsCache);\n    } else {\n      this._heartbeatsCache.heartbeats = [];\n      // Do not wait for this, to reduce latency.\n      void this._storage.overwrite(this._heartbeatsCache);\n    }\n    return headerString;\n  }\n}\n\nfunction getUTCDateString(): string {\n  const today = new Date();\n  // Returns date format 'YYYY-MM-DD'\n  return today.toISOString().substring(0, 10);\n}\n\nexport function extractHeartbeatsForHeader(\n  heartbeatsCache: SingleDateHeartbeat[],\n  maxSize = MAX_HEADER_BYTES\n): {\n  heartbeatsToSend: HeartbeatsByUserAgent[];\n  unsentEntries: SingleDateHeartbeat[];\n} {\n  // Heartbeats grouped by user agent in the standard format to be sent in\n  // the header.\n  const heartbeatsToSend: HeartbeatsByUserAgent[] = [];\n  // Single date format heartbeats that are not sent.\n  let unsentEntries = heartbeatsCache.slice();\n  for (const singleDateHeartbeat of heartbeatsCache) {\n    // Look for an existing entry with the same user agent.\n    const heartbeatEntry = heartbeatsToSend.find(\n      hb => hb.agent === singleDateHeartbeat.agent\n    );\n    if (!heartbeatEntry) {\n      // If no entry for this user agent exists, create one.\n      heartbeatsToSend.push({\n        agent: singleDateHeartbeat.agent,\n        dates: [singleDateHeartbeat.date]\n      });\n      if (countBytes(heartbeatsToSend) > maxSize) {\n        // If the header would exceed max size, remove the added heartbeat\n        // entry and stop adding to the header.\n        heartbeatsToSend.pop();\n        break;\n      }\n    } else {\n      heartbeatEntry.dates.push(singleDateHeartbeat.date);\n      // If the header would exceed max size, remove the added date\n      // and stop adding to the header.\n      if (countBytes(heartbeatsToSend) > maxSize) {\n        heartbeatEntry.dates.pop();\n        break;\n      }\n    }\n    // Pop unsent entry from queue. (Skipped if adding the entry exceeded\n    // quota and the loop breaks early.)\n    unsentEntries = unsentEntries.slice(1);\n  }\n  return {\n    heartbeatsToSend,\n    unsentEntries\n  };\n}\n\nexport class HeartbeatStorageImpl implements HeartbeatStorage {\n  private _canUseIndexedDBPromise: Promise<boolean>;\n  constructor(public app: FirebaseApp) {\n    this._canUseIndexedDBPromise = this.runIndexedDBEnvironmentCheck();\n  }\n  async runIndexedDBEnvironmentCheck(): Promise<boolean> {\n    if (!isIndexedDBAvailable()) {\n      return false;\n    } else {\n      return validateIndexedDBOpenable()\n        .then(() => true)\n        .catch(() => false);\n    }\n  }\n  /**\n   * Read all heartbeats.\n   */\n  async read(): Promise<HeartbeatsInIndexedDB> {\n    const canUseIndexedDB = await this._canUseIndexedDBPromise;\n    if (!canUseIndexedDB) {\n      return { heartbeats: [] };\n    } else {\n      const idbHeartbeatObject = await readHeartbeatsFromIndexedDB(this.app);\n      if (idbHeartbeatObject?.heartbeats) {\n        return idbHeartbeatObject;\n      } else {\n        return { heartbeats: [] };\n      }\n    }\n  }\n  // overwrite the storage with the provided heartbeats\n  async overwrite(heartbeatsObject: HeartbeatsInIndexedDB): Promise<void> {\n    const canUseIndexedDB = await this._canUseIndexedDBPromise;\n    if (!canUseIndexedDB) {\n      return;\n    } else {\n      const existingHeartbeatsObject = await this.read();\n      return writeHeartbeatsToIndexedDB(this.app, {\n        lastSentHeartbeatDate:\n          heartbeatsObject.lastSentHeartbeatDate ??\n          existingHeartbeatsObject.lastSentHeartbeatDate,\n        heartbeats: heartbeatsObject.heartbeats\n      });\n    }\n  }\n  // add heartbeats\n  async add(heartbeatsObject: HeartbeatsInIndexedDB): Promise<void> {\n    const canUseIndexedDB = await this._canUseIndexedDBPromise;\n    if (!canUseIndexedDB) {\n      return;\n    } else {\n      const existingHeartbeatsObject = await this.read();\n      return writeHeartbeatsToIndexedDB(this.app, {\n        lastSentHeartbeatDate:\n          heartbeatsObject.lastSentHeartbeatDate ??\n          existingHeartbeatsObject.lastSentHeartbeatDate,\n        heartbeats: [\n          ...existingHeartbeatsObject.heartbeats,\n          ...heartbeatsObject.heartbeats\n        ]\n      });\n    }\n  }\n}\n\n/**\n * Calculate bytes of a HeartbeatsByUserAgent array after being wrapped\n * in a platform logging header JSON object, stringified, and converted\n * to base 64.\n */\nexport function countBytes(heartbeatsCache: HeartbeatsByUserAgent[]): number {\n  // base64 has a restricted set of characters, all of which should be 1 byte.\n  return base64urlEncodeWithoutPadding(\n    // heartbeatsCache wrapper properties\n    JSON.stringify({ version: 2, heartbeats: heartbeatsCache })\n  ).length;\n}\n", "/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Component, ComponentType } from '@firebase/component';\nimport { PlatformLoggerServiceImpl } from './platformLoggerService';\nimport { name, version } from '../package.json';\nimport { _registerComponent } from './internal';\nimport { registerVersion } from './api';\nimport { HeartbeatServiceImpl } from './heartbeatService';\n\nexport function registerCoreComponents(variant?: string): void {\n  _registerComponent(\n    new Component(\n      'platform-logger',\n      container => new PlatformLoggerServiceImpl(container),\n      ComponentType.PRIVATE\n    )\n  );\n  _registerComponent(\n    new Component(\n      'heartbeat',\n      container => new HeartbeatServiceImpl(container),\n      ComponentType.PRIVATE\n    )\n  );\n\n  // Register `app` package.\n  registerVersion(name, version, variant);\n  // BUILD_TARGET will be replaced by values like esm5, esm2017, cjs5, etc during the compilation\n  registerVersion(name, version, '__BUILD_TARGET__');\n  // Register platform SDK identifier (no version).\n  registerVersion('fire-js', '');\n}\n", "/**\n * Firebase App\n *\n * @remarks This package coordinates the communication between the different Firebase components\n * @packageDocumentation\n */\n\n/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { registerCoreComponents } from './registerCoreComponents';\n\nexport * from './api';\nexport * from './internal';\nexport * from './public-types';\n\nregisterCoreComponents('__RUNTIME_ENV__');\n"],
  "mappings": "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",
  "names": ["appName", "appCompatName", "analyticsName", "analyticsCompatName", "appCheckName", "appCheckCompatName", "authName", "authCompatName", "databaseName", "databaseCompatName", "functionsName", "functionsCompatName", "installationsName", "installationsCompatName", "messagingName", "messagingCompatName", "performanceName", "performanceCompatName", "remoteConfigName", "remoteConfigCompatName", "storageName", "storageCompatName", "firestoreName", "firestoreCompatName", "vertexName", "packageName", "name", "version", "setLogLevel", "setLogLevelImpl"]
}
